// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShiningLight.DataAccess;

namespace ShiningLight.DataAccess.Migrations
{
    [DbContext(typeof(ShiningLightDBContext))]
    [Migration("20210420175010_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ShinigLight.ApplicationLogic.DataModels.Appointment", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClinicID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DoctorsID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Prices")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ClinicID");

                    b.HasIndex("DoctorsID");

                    b.HasIndex("UserID");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("ShinigLight.ApplicationLogic.DataModels.Clinic", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AppointmentID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("AppointmentID");

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("ShinigLight.ApplicationLogic.DataModels.ClinicServices", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClinicID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServicesID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ClinicID");

                    b.HasIndex("ServicesID");

                    b.ToTable("ClinicsServices");
                });

            modelBuilder.Entity("ShinigLight.ApplicationLogic.DataModels.Doctor", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClinicID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qualification")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ClinicID");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("ShinigLight.ApplicationLogic.DataModels.Invoice", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("ShinigLight.ApplicationLogic.DataModels.Services", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("ShinigLight.ApplicationLogic.DataModels.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ShinigLight.ApplicationLogic.DataModels.Appointment", b =>
                {
                    b.HasOne("ShinigLight.ApplicationLogic.DataModels.Clinic", null)
                        .WithMany("Appointments")
                        .HasForeignKey("ClinicID");

                    b.HasOne("ShinigLight.ApplicationLogic.DataModels.Doctor", "Doctors")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorsID");

                    b.HasOne("ShinigLight.ApplicationLogic.DataModels.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("ShinigLight.ApplicationLogic.DataModels.Clinic", b =>
                {
                    b.HasOne("ShinigLight.ApplicationLogic.DataModels.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentID");
                });

            modelBuilder.Entity("ShinigLight.ApplicationLogic.DataModels.ClinicServices", b =>
                {
                    b.HasOne("ShinigLight.ApplicationLogic.DataModels.Clinic", "Clinic")
                        .WithMany("Client_Services")
                        .HasForeignKey("ClinicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShinigLight.ApplicationLogic.DataModels.Services", "Services")
                        .WithMany("ClientServices")
                        .HasForeignKey("ServicesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShinigLight.ApplicationLogic.DataModels.Doctor", b =>
                {
                    b.HasOne("ShinigLight.ApplicationLogic.DataModels.Clinic", "Clinic")
                        .WithMany("Doctors")
                        .HasForeignKey("ClinicID");
                });

            modelBuilder.Entity("ShinigLight.ApplicationLogic.DataModels.Invoice", b =>
                {
                    b.HasOne("ShinigLight.ApplicationLogic.DataModels.User", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserID");
                });
#pragma warning restore 612, 618
        }
    }
}
